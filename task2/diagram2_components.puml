@startuml
!define C4Component
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

ContainerDb(devicesDb, "DeviceManagamentDb", "PostgreSQL", "База данных устройств")
Container(kafka, "Kafka")

Container_Boundary(deviceManagement, "Сервис управления устройствами") {
    Component(registration, "Контроллер регистрации устройств")
    Component(activation, "Контроллер активации устройств")
    Component(deviceService, "Service layer", "Bussiness logic")
    Component(repository, "Repository layer", "Data access logic")
    Component(eventPublisher, "Kafka Client")
}

Rel(registration, deviceService, "Uses")
Rel(activation, deviceService, "Uses")
Rel(deviceService, repository, "Uses")
Rel(deviceService, eventPublisher, "Publish")
Rel(eventPublisher, kafka, "Send")
Rel(repository, devicesDb, "Read/Write")
@enduml

@startuml

!define C4Component
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
'auth
ContainerDb(userDb, "База данных пользователей", "PostgreSQL")
Container(identity, "IdentityServer")
Container_Boundary(auth,"Сервис аутентификации") {
    Component(userRegistration, "Контроллер регистрации")
    Component(authController, "Контроллер авторизации")
    Component(authServiceLayer, "Service layer", "Bussiness logic")
    Component(userRepository, "Repository layer", "Data access logic")
}
Rel(userRegistration, authServiceLayer, "Uses")
Rel(authController, authServiceLayer, "Uses")
Rel(authServiceLayer, identity, "Uses")
Rel(authServiceLayer, userRepository, "Uses")
Rel(userRepository, userDb, "Read/Write")

@enduml


@startuml
!define C4Component
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

ContainerDb(monitoringDb, "База данных мониторинга", "InfluxDB", "База данных телеметрии")
Container(kafka, "Kafka")
Container(metrics, "Prometheus и Grafana")
ContainerDb(scenariosDb, "База данных сценариев", "MongoDB", "Хранит пользовательские сценарии и правила автоматизации.")

Container_Boundary(monitor, "Сервис мониторинга") {
    Component(reportController, "Device reports controller","Телеметрия подключенных устройств.")
    Component(consumer, "EventsConsumer")
    Component(analisys, "Analitycal Engine","Процессинг отчетов")
    Component(repository, "Repository layer", "Data access logic")

    Rel(analisys, metrics, "Sends telemetry")
    Rel(reportController, analisys, "Uses")
    Rel(analisys, repository, "Uses")
    Rel(consumer, repository, "Read/Write")
    Rel(consumer, kafka, "Subscribes")
    Rel(repository, monitoringDb, "Read/Write")
}


Container_Boundary(scenario, "Сервис сценариев") {
    Component(scenarioController, "Scenario controller","Создание сценариев")
    Component(schedulerController, "Sheduler controller","Планировщик")
    Component(appLogic, "Application layer","Слой бизнес-логики")
    Component(worker,"Scenario Handler", "Обработчик сценариев")
    Component(repoScen, "Repository layer", "Data access logic")

    Rel(scenarioController, appLogic, "Uses")
    Rel(schedulerController, appLogic, "Uses")
    Rel(appLogic, repoScen, "Read/Write")
    Rel(worker, repoScen, "Read/Write")
    Rel(repoScen, scenariosDb, "Read/Write")
}

@enduml


@startuml
!define C4Component
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

ContainerDb(scenariosDb, "База данных сценариев", "MongoDB", "Хранит пользовательские сценарии и правила автоматизации.")

Container_Boundary(scenario, "Сервис сценариев") {
    Component(scenarioController, "Scenario controller","Создание сценариев")
    Component(schedulerController, "Sheduler controller","Планировщик")
    Component(appLogic, "Application layer","Слой бизнес-логики")
    Component(worker,"Scenario Handler", "Обработчик сценариев")
    Component(repository, "Repository layer", "Data access logic")

    Rel(scenarioController, appLogic, "Uses")
    Rel(schedulerController, appLogic, "Uses")
    Rel(appLogic, repository, "Read/Write")
    Rel(worker, repository, "Read/Write")
    Rel(repository, scenariosDb, "Read/Write")
}

@enduml



@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
' uncomment the following line and comment the first to use locally
' !include C4_Component.puml

LAYOUT_WITH_LEGEND()

title Component diagram for Internet Banking System - API Application

Container(spa, "Single Page Application", "javascript and angular", "Provides all the internet banking functionality to customers via their web browser.")
Container(ma, "Mobile App", "Xamarin", "Provides a limited subset ot the internet banking functionality to customers via their mobile mobile device.")
ContainerDb(db, "Database", "Relational Database Schema", "Stores user registration information, hashed authentication credentials, access logs, etc.")
System_Ext(mbs, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.")

Container_Boundary(api, "API Application") {
    Component(sign, "Sign In Controller", "MVC Rest Controller", "Allows users to sign in to the internet banking system")
    Component(accounts, "Accounts Summary Controller", "MVC Rest Controller", "Provides customers with a summary of their bank accounts")
    Component(security, "Security Component", "Spring Bean", "Provides functionality related to singing in, changing passwords, etc.")
    Component(mbsfacade, "Mainframe Banking System Facade", "Spring Bean", "A facade onto the mainframe banking system.")

    Rel(sign, security, "Uses")
    Rel(accounts, mbsfacade, "Uses")
    Rel(security, db, "Read & write to", "JDBC")
    Rel(mbsfacade, mbs, "Uses", "XML/HTTPS")
}

Rel(spa, sign, "Uses", "JSON/HTTPS")
Rel(spa, accounts, "Uses", "JSON/HTTPS")

Rel(ma, sign, "Uses", "JSON/HTTPS")
Rel(ma, accounts, "Uses", "JSON/HTTPS")
@enduml