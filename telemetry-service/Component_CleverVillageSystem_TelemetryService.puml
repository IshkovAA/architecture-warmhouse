@startuml
!include <C4/C4_Container>

LAYOUT_WITH_LEGEND()

System_Boundary(telemetry_service_boundary, "Telemetry Service") {
    Container(emergency_consumer, "EmergencyConsumer", "Golang", "Обрабатывает ивенты для аварийного выключения модуля")
    Container(new_house_consumer, "NewHouseConsumer", "Golang", "Обрабатывает ивенты о подключении нового дома к системе Smart Home")
    Container(telemetry_consumer, "TelemetryConsumer", "Golang", "Обрабатывает ивенты от оборудования и датчиков")

    ContainerDb(mongo_db, "Telemetry Database", "MongoDB", "Хранит ивенты, которые пишутся от консьюмеров")
}

ContainerQueue(kafka_broker, "Kafka", "Message Broker", "Брокер сообщения для ассинхронного взаимодействия")
Container(device_service, "DeviceService", "Microservice", "Сервис управления модулями") #1368bd
System_Ext(external_equipment, "Physical Equipment", "Физическое оборудование: ворота, котлы, камеры, датчики и так далее")

Rel(emergency_consumer, mongo_db, "Сохраняет ивенты об аварийном отключении модулей", "Golang GORM")
Rel(emergency_consumer, device_service, "Аварийно выключает модуль", "HTTP")
Rel(new_house_consumer, mongo_db, "Сохраняет ивенты о подключении нового дома к системе", "Golang GORM")
Rel(telemetry_consumer, mongo_db, "Сохраняет ивенты телеметрии от обрудования и датчиков", "Golang GORM")

Rel(kafka_broker, emergency_consumer, "Обрабатывает ивенты", "telemetry.data")
Rel(kafka_broker, new_house_consumer, "Обрабатывает ивенты", "forced.module.shutdown")
Rel(kafka_broker, telemetry_consumer, "Обрабатывает ивенты", "house.initialization")
Rel(external_equipment, kafka_broker, "Генерирует ивенты")

@enduml
