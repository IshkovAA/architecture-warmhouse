@startuml
!include <C4/C4>
!include <C4/C4_Context>
!include <C4/C4_Container>
!include <C4/C4_Component>

title Диаграмма компонентов для Temperature Monitoring Service

Container_Boundary(tempService, "Temperature Monitoring Service", $tags="") {
    Component(tempService.APIController, "API Controller", $techn="Python Flask", $descr="Обработка API запросов")
    Component(tempService.SensorDataCollector, "Sensor Data Collector", $techn="Python", $descr="Сбор данных с датчиков")
    Component(tempService.DataProcessor, "Data Processor", $techn="Python", $descr="Обработка и хранение данных")
    Component(tempService.EventPublisher, "Event Publisher", $techn="Python", $descr="Публикация данных в Kafka")
    Component(tempService.TelemetryDBAccess, "Telemetry DB Access", $techn="Python", $descr="Доступ к базе данных телеметрии")
}

ContainerDb(telemetryDb, "Telemetry DB", $techn="InfluxDB", $descr="Телеметрические данные")
Container_Ext(tempSensors, "Temperature Sensors", $techn="IoT Devices", $descr="Датчики температуры")
Container(kafka, "Kafka", $techn="Apache Kafka", $descr="Шина данных")

Rel(tempService.APIController, tempService.DataProcessor, "Получает запросы данных", $techn="HTTP")
Rel(tempService.APIController, tempService.SensorDataCollector, "Отправляет команды на сбор данных", $techn="HTTP")
Rel(tempService.SensorDataCollector, tempSensors, "Собирает данные с датчиков", $techn="HTTP/MQTT")
Rel(tempService.SensorDataCollector, tempService.DataProcessor, "Передает сырые данные", $techn="")
Rel(tempService.DataProcessor, tempService.TelemetryDBAccess, "Сохраняет данные", $techn="")
Rel(tempService.TelemetryDBAccess, telemetryDb, "Читает и пишет", $techn="TCP")
Rel(tempService.DataProcessor, tempService.EventPublisher, "Отправляет обработанные данные", $techn="")
Rel(tempService.EventPublisher, kafka, "Публикует данные", $techn="Kafka Protocol")

@enduml
