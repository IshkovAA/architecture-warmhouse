@startuml
!define C4Container
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title Smart Home Ecosystem - Containers Level

Person(webUser, "User", "Interacts with the smart home system via the web application.")

System_Boundary(SmartHomeSystem, "Smart Home Ecosystem") {

    Container(webApp, "Smart Home Web App", "React + TypeScript", "Frontend application for managing devices and scenarios.")
    Container(apiGateway, "Kong API Gateway", "Kong", "Handles authentication, routing, and external API requests.")
Container_Boundary(microservices, "Микросервисы") {
    Container(deviceManagement, "Device Management Service", "Java + Spring Boot", "Manages registration, metadata, and statuses of devices.")
    Container(cameraStreaming, "Camera Streaming Service", "Node.js", "Handles video streams for connected cameras.")
    Container(heatingControl, "Heating Control Service", "Python + Flask", "Manages heating devices and thermostats.")
    Container(lightingControl, "Lighting Control Service", "Go", "Controls lighting schedules and devices.")
    Container(gateControl, "Gate Control Service", "Rust", "Manages gates and access controls.")
    Container(scenarioOrchestrator, "Scenario Orchestrator Service", "Kotlin + Spring Boot", "Handles user-defined automation scenarios.")
}
Container(kafka, "Kafka", "Apache Kafka", "Event bus for asynchronous communication between services.")
Container_Boundary(databases, "Базы данных"){
    ContainerDb(devicesDb, "Devices DB", "PostgreSQL", "Stores device metadata, statuses, and configurations.")
    ContainerDb(scenariosDb, "Scenarios DB", "MongoDB", "Stores user-created scenarios and automation rules.")
}

}
Rel(webUser, webApp, "Manages devices and scenarios", "HTTPS")
Rel(webApp, apiGateway, "Routes user requests", "HTTPS")
Rel(apiGateway, deviceManagement, "Manages devices", "HTTP")
Rel(deviceManagement, devicesDb, "Stores and retrieves device metadata", "JDBC")
Rel(deviceManagement, kafka, "Publishes/consumes device events", "Kafka")
Rel(apiGateway, cameraStreaming, "Streams camera feeds", "HTTP")
Rel(cameraStreaming, kafka, "Subscribes to device events", "Kafka")
Rel(cameraStreaming, webApp, "Delivers video streams", "WebRTC")
Rel(apiGateway, heatingControl, "Manages heating devices", "HTTP")
Rel(heatingControl, kafka, "Publishes/consumes heating events", "Kafka")
Rel(apiGateway, lightingControl, "Manages lighting", "HTTP")
Rel(lightingControl, kafka, "Publishes/consumes lighting events", "Kafka")
Rel(apiGateway, gateControl, "Manages gates", "HTTP")
Rel(gateControl, kafka, "Publishes/consumes gate events", "Kafka")
Rel(apiGateway, scenarioOrchestrator, "Manages automation scenarios", "HTTP")
Rel(scenarioOrchestrator, kafka, "Triggers automation events", "Kafka")
Rel(scenarioOrchestrator, scenariosDb, "Stores automation rules", "JDBC")
Rel(deviceManagement, heatingControl, "Controls heating devices directly", "HTTP/Standard protocols")
Rel(deviceManagement, lightingControl, "Controls lighting devices directly", "HTTP/Standard protocols")
Rel(deviceManagement, gateControl, "Controls gate devices directly", "HTTP/Standard protocols")
Rel(deviceManagement, cameraStreaming, "Handles camera connections", "HTTP/Standard protocols")

@enduml


