@startuml seq
autonumber
skinparam BoxPadding 10
title Диаграмма последовательности сервиса Элемент

actor Client
box "Requests.Api" #LightBlue
participant "RequestsTestApiController" as Controller
participant "InitializeMobileSignatureReleaseHandler" as Handler
participant "IRequestsRepository" as RequestsRepo
end box

box "Integration Bus" #E1C16E
queue "RabbitMq" as Bus
end box



box "Element.Api" #EADDCA
participant "InitializeMobileSignatureReleaseConsumer" as Consumer1
participant "DocumentFlowDataUploadedToFsConsumer" as Consumer2
participant  "documentFlowDataRepository" as documentFlowDataRepository
participant HandlerInitMSR[
=InitializeMobileSignatureReleaseHandler
----
""Отправка запроса на сертификат в Element""
] 
participant RequestPackager [
    =RequestPackager
    ----
    ""Упаковщик запроса""
]
participant  "CertificateRequestPackageXmlBuilder" as CertificateRequestPackageXmlBuilder <<Сборщик XML-пакета запрос на сертификат>>
participant  "PacketDescriptionXmlBuilder" as PacketDescriptionXmlBuilder <<Сборщик метаданных пакета(packetDescription.xml)>>
participant  "documentFlowDataService" as documentFlowDataService
participant  "fileService" as fileService
boundary "elementClient" as elementClient #SkyBlue
database  "mobileSignatureRequestRepository" as mobileSignatureRequestRepository <<Недописанный!!!>>

end box

Client -> Controller:Инициализировать выпуск мобильной подписи\nPOST /InitializeMobileSignatureRequest\n(Идентификатор заявки на ЭП requestId)
Controller -> Handler: Send(InitializeMobileSignatureReleaseCommand\nКоманда инициализации мобильной подписи)
Handler -> RequestsRepo: GetRequestById(requestId)
Handler -> RequestsRepo: UpdateStatus(request, **IsQueuedToQrCodeGeneration**)
Handler -> Bus: Publish(InitializeMobileSignatureReleaseEvent)
Consumer1 <-- Bus:Consume(InitializeMobileSignatureRelease)
Consumer1 -> HandlerInitMSR: Send(InitializeMobileSignatureReleaseCommand)

group #F0E68C Создание пакета запроса на сертификат мобильной подписи
HandlerInitMSR -[#Red]> RequestPackager: **PackMobileCertificateRequest(MobileSignatureRequest)
note left 
"Сложная логика" 
end note
RequestPackager -> CertificateRequestPackageXmlBuilder: Build(request.bin)
RequestPackager -> PacketDescriptionXmlBuilder: BuildPersonal(packetDescription.xml)
HandlerInitMSR -> documentFlowDataService: Сохранить документооборот MobileSignRequest.zip
HandlerInitMSR -> elementClient:Http SendRequest(packageInBase64)
note left : Отправка пакета в ELEMENT
HandlerInitMSR -> mobileSignatureRequestRepository: Сохранить запрос в БД 
documentFlowDataService -> fileService: Сохранить файл
documentFlowDataService -> Bus: Publish(DocumentFlowDataUploadedToFs) <<Данные документооборота загружены на файл-сервис>>
rnote over mobileSignatureRequestRepository
**Не реализовано!**
end rnote
end
group #LightGreen Сохранить файл и документооборот

Consumer2 <-- Bus:Consume(DocumentFlowDataUploadedToFs)
Consumer2 -> documentFlowDataRepository: Сохранить в табл DocumentFlowData
end

Controller <-- Client: HTTP 200 OK
@enduml
