@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml


skinparam wrapWidth 250
LAYOUT_WITH_LEGEND()
LAYOUT_TOP_DOWN()

title
        <b>Компонентная диаграмма сервиса TelemetryService</b>
end title

Person(user, "Пользователь", "Пользователь системы умного дома")

Boundary(Frontend, "Клиентский интерфейс", "domain") {
        Container(spa, "Веб-приложение", "TypeScript/React", "Интерфейс управления устройствами")
}

Boundary(Infrastructure, "Инфраструктура", "domain") {
        Container(api_gw, "API Gateway", "Kong/Nginx", "Маршрутизация и балансировка запросов")
        SystemQueue(message_bus, "Шина сообщений", "Kafka", "Асинхронная коммуникация между сервисами")
}

Boundary(Telemetry, "Сервис телеметрии", "domain") {
        Component(TelemetryController, "Telemetry Controller", "Spring Boot", "Контроллер получения данных устройств")
        Component(EventHandler, "Event Handler", "Spring Kafka", "Обрабатывает DeviceSensorUpdateEvent")
        SystemDb(TelemetryCache, "Telemetry Cache", "Redis Cluster", "Хранит актуальные данные датчиков")
        
        Rel(EventHandler, TelemetryCache, "Запись данных")
        Rel(TelemetryController, TelemetryCache, "Чтение данных")
        Rel(EventHandler, message_bus, "Подписка", "DeviceSensorUpdateEvent")
}

Boundary(DeviceCommunication, "Сервис коммуникации с устройствами", "domain") {
        Container(DeviceMessagingService, "Сервис коммуникации с устройствами", "Java/Spring", "Двусторонняя связь с устройствами через протоколы IoT")
}

Rel(user, spa, "Просмотр данных от устройств", "HTTPS")
Rel(spa, api_gw, "API запросы", "REST/JSON")
Rel(api_gw, TelemetryController, "Получение данных", "HTTP/JSON")
Rel(TelemetryController, message_bus, "Отправка команд на обновление данных", "nDeviceSensorUpdateCommand")
Rel(DeviceMessagingService, message_bus, "Публикация событий", "DeviceSensorUpdateEvent")

@enduml