openapi: 3.0.3
info:
  title: Smart Home System API Gateway
  description: Gateway for all Smart Home System microservices
  version: 1.0.0
servers:
  - url: https://api.smarthome.com/v1
paths:
  /auth/login:
    post:
      summary: Authenticate user
      operationId: authenticateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Authentication failed

  /users/profile:
    get:
      summary: Get user profile
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
    put:
      summary: Update user profile
      operationId: updateUserProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: User profile updated successfully
        '401':
          description: Unauthorized

  /devices:
    get:
      summary: Get all devices
      operationId: getAllDevices
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of devices retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
        '401':
          description: Unauthorized
    post:
      summary: Add a new device
      operationId: addDevice
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceRequest'
      responses:
        '201':
          description: Device added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '401':
          description: Unauthorized

  /devices/{deviceId}:
    put:
      summary: Update a device
      operationId: updateDevice
      security:
        - bearerAuth: []
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceUpdateRequest'
      responses:
        '200':
          description: Device updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Device not found

    delete:
      summary: Delete a device
      operationId: deleteDevice
      security:
        - bearerAuth: []
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Device deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Device not found

  /automation/rules:
    get:
      summary: Get all automation rules
      operationId: getAllRules
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of automation rules retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AutomationRule'
        '401':
          description: Unauthorized
    post:
      summary: Create a new automation rule
      operationId: createRule
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutomationRuleRequest'
      responses:
        '201':
          description: Automation rule created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationRule'
        '401':
          description: Unauthorized

components:
  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        userId:
          type: string
        expiresAt:
          type: string
          format: date-time

    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [USER, ADMIN]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserUpdateRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    Device:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [TEMPERATURE_SENSOR, HEATING_SYSTEM, THERMOSTAT]
        status:
          type: string
          enum: [ONLINE, OFFLINE, MAINTENANCE]
        location:
          $ref: '#/components/schemas/Location'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    DeviceRequest:
      type: object
      required:
        - name
        - type
        - locationId
      properties:
        name:
          type: string
        type:
          type: string
          enum: [TEMPERATURE_SENSOR, HEATING_SYSTEM, THERMOSTAT]
        locationId:
          type: string

    DeviceUpdateRequest:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
          enum: [ONLINE, OFFLINE, MAINTENANCE]
        locationId:
          type: string

    Location:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        address:
          type: string
        city:
          type: string
        country:
          type: string

    AutomationRule:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        trigger:
          $ref: '#/components/schemas/Trigger'
        action:
          $ref: '#/components/schemas/Action'
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    AutomationRuleRequest:
      type: object
      required:
        - name
        - trigger
        - action
      properties:
        name:
          type: string
        trigger:
          $ref: '#/components/schemas/Trigger'
        action:
          $ref: '#/components/schemas/Action'
        isActive:
          type: boolean
          default: true

    Trigger:
      type: object
      properties:
        type:
          type: string
          enum: [TEMPERATURE, TIME, DEVICE_STATUS]
        deviceId:
          type: string
        condition:
          type: string
          enum: [GREATER_THAN, LESS_THAN, EQUALS, BETWEEN]
        value:
          type: number
        secondValue:
          type: number
        timeValue:
          type: string
          format: date-time

    Action:
      type: object
      properties:
        type:
          type: string
          enum: [TURN_ON, TURN_OFF, SET_TEMPERATURE]
        deviceId:
          type: string
        value:
          type: number

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT